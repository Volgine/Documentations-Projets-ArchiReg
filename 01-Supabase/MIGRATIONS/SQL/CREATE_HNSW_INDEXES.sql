-- ============================================
-- CR√âATION INDEX HNSW POUR OPTIMISATION RAG
-- ============================================
-- Date: 13 octobre 2025
-- Auteur: Agent-Orchestrator
-- Objectif: Acc√©l√©rer recherche vectorielle (930k docs)
-- Gain attendu: 100x √† 1000x plus rapide
-- Dur√©e cr√©ation: 5-15 minutes selon charge serveur
-- ============================================

-- ‚ö†Ô∏è IMPORTANT: Ex√©cuter dans le SQL Editor de Supabase Dashboard
-- URL: https://supabase.com/dashboard/project/joozqsjbcwrqyeqepnev/sql/new

-- ============================================
-- 1. INDEX HNSW SUR documents.embedding
-- ============================================

-- Cr√©er l'index HNSW (asynchrone, ne bloque pas la base)
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_embedding_hnsw 
ON documents 
USING hnsw (embedding vector_cosine_ops)
WITH (
    m = 16,              -- Nombre de connexions par n≈ìud (balance pr√©cision/vitesse)
    ef_construction = 64 -- Taille de la file pendant construction (qualit√© index)
);

-- ============================================
-- 2. INDEX HNSW SUR document_chunks.embedding
-- ============================================

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_document_chunks_embedding_hnsw 
ON document_chunks 
USING hnsw (embedding vector_cosine_ops)
WITH (
    m = 16,
    ef_construction = 64
);

-- ============================================
-- 3. OPTIMISER LES STATISTIQUES
-- ============================================

-- Mettre √† jour les statistiques pour le query planner
ANALYZE documents;
ANALYZE document_chunks;

-- ============================================
-- 4. V√âRIFIER LES INDEX CR√â√âS
-- ============================================

SELECT 
    schemaname,
    tablename,
    indexname,
    indexdef,
    pg_size_pretty(pg_relation_size(indexname::regclass)) as index_size
FROM pg_indexes
WHERE indexname LIKE '%hnsw%'
ORDER BY tablename, indexname;

-- ============================================
-- 5. V√âRIFIER LES PERFORMANCES (OPTIONNEL)
-- ============================================

-- Test avant/apr√®s: recherche vectorielle
-- Avant index: 30+ secondes (timeout)
-- Apr√®s index: <1 seconde

-- Exemple de requ√™te test:
-- EXPLAIN ANALYZE
-- SELECT id, content, embedding <=> '[0.1,0.2,...]'::vector as distance
-- FROM documents
-- WHERE embedding <=> '[0.1,0.2,...]'::vector < 0.7
-- ORDER BY distance
-- LIMIT 8;

-- ============================================
-- üìä R√âSULTATS ATTENDUS
-- ============================================

-- Index HNSW cr√©√©s:
-- ‚úÖ idx_documents_embedding_hnsw (~500 MB pour 930k docs)
-- ‚úÖ idx_document_chunks_embedding_hnsw (~300 MB pour ~7M chunks)

-- Performances RAG:
-- ‚úÖ Recherche < 1s au lieu de timeout
-- ‚úÖ Chatbot r√©pond instantan√©ment avec contexte
-- ‚úÖ Frontend ne timeout plus

-- ============================================
-- ‚ö†Ô∏è NOTES IMPORTANTES
-- ============================================

-- 1. CONCURRENTLY permet cr√©ation sans bloquer la base
-- 2. Dur√©e: 5-15 minutes selon charge serveur
-- 3. Espace disque: ~800 MB suppl√©mentaires
-- 4. Pas de downtime pendant cr√©ation
-- 5. Si erreur, r√©essayer sans CONCURRENTLY (mais bloquera la base)

-- ============================================
-- üîó DOCUMENTATION
-- ============================================

-- pgvector HNSW: https://github.com/pgvector/pgvector#hnsw
-- Supabase pgvector: https://supabase.com/docs/guides/ai/vector-indexes
-- HNSW params: https://github.com/pgvector/pgvector#index-options

